{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import { createEventDispatcher, onMount  } from \"svelte\";\r\n    import { throttle } from \"lodash-es\"\r\n\r\n    // le tableau qu'on désire afficher\r\n    export let showedTable;\r\n    // le nombre réel de ligne du tableau, permet de générer un conteneur à la taille adéquat\r\n    export let maxRows;\r\n    // le nombre réel de colonne du tableau, permet de générer un conteneur à la taille adéquat\r\n    export let maxColumns;\r\n\r\n    const request = createEventDispatcher();\r\n\r\n    const WANTED_FPS = 30;\r\n\r\n    // pour ne pas surcharger le process on throttle la mise à jour du tableau\r\n    const throttleRequestOfNewArray = throttle(requestNewArray, 1000/WANTED_FPS);\r\n\r\n    // variable qui pointera vers une cellule (la dernière ajouté au dom)\r\n    // ceci permettra d'obtenir programmatiquement les dimension de la cellule\r\n    let cellDomElement;\r\n\r\n    // la largeur et la hauteur d'une cellule, sera utile pour calculer la portion de tableau nécessaire\r\n    // sera initialisé au même moment que le composant (onMount)\r\n    let cellHeight;\r\n    let cellWidth;\r\n\r\n    // on stock les valeurs de scroll, elles seront nécessaire lors du resize du browser\r\n    // pour calculer la nouvelle portion de tableau que l'on désire\r\n    let scrollTop = 0;\r\n    let scrollLeft = 0;\r\n\r\n    onMount(() => {\r\n        cellWidth = cellDomElement.offsetWidth;\r\n        cellHeight = cellDomElement.offsetHeight;\r\n        setTimeout(() => throttleRequestOfNewArray(), 100);\r\n    })\r\n    // si l'utilisateur fait varier la taille de son browser on désire que la portion de tableau affiché reste correct\r\n    window.addEventListener(\"resize\", throttleRequestOfNewArray);\r\n\r\n    function onScroll(){\r\n        scrollTop = this.scrollTop;\r\n        scrollLeft = this.scrollLeft;\r\n        throttleRequestOfNewArray();\r\n    }\r\n\r\n    // sur un resize du browser, ou un scroll de l'utilisateur, on veut afficher la partie visible du tableau et uniquement celle ci\r\n    // via un simple calcul faisant intervenir la position de la scrollbar et la taille total de la fenêtre on est\r\n    // capable de demander la portion du tableau qui est censé être visible\r\n    function requestNewArray(){\r\n        request(\r\n            \"updateArray\",\r\n            {\r\n                startRow:Math.floor(scrollTop/cellHeight),\r\n                nbRow: Math.ceil(window.innerHeight / cellHeight),\r\n                startColumn: Math.floor(scrollLeft/cellWidth),\r\n                nbColumn: Math.ceil(window.innerWidth / cellWidth)\r\n            }\r\n        );\r\n    }\r\n</script>\r\n\r\n<style>\r\n    div {\r\n        overflow: scroll;\r\n        background-color: gold;\r\n        position: relative;\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n    table{\r\n        border-collapse: collapse;\r\n    }\r\n    .fifth {\r\n        background-color: gainsboro;\r\n    }\r\n    td {\r\n        position: absolute;\r\n        max-width: 150px;\r\n        min-width: 150px;\r\n        max-height: 21px;\r\n        min-height: 21px;\r\n        border: 1px solid black;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n    }\r\n</style>\r\n\r\n<div on:scroll={onScroll}>\r\n    <!-- le tableau DOM aura les dimension réel du tableau de donnée\r\n         et ceci afin de profiter de la fonctionnalité native de la scrollbar -->\r\n    <table style=\"height: {maxRows*cellHeight}px; width: {maxColumns*cellWidth}px\">\r\n        {#each showedTable as  {realRowIndex, rowContent}, rowIndex (realRowIndex)}\r\n            <tr>\r\n                {#each rowContent as {realColumnIndex, cellContent}, cellIndex (realColumnIndex)}\r\n                    <td \r\n                        bind:this={cellDomElement}\r\n                        style=\"top: {realRowIndex*cellHeight}px; left: {realColumnIndex*cellWidth}px\"\r\n                        class:fifth={realColumnIndex % 10 === 0 || realRowIndex % 10 === 0}\r\n                        title={cellContent}>\r\n                        {cellContent}\r\n                    </td>\r\n                {/each}\r\n            </tr>\r\n        {/each}\r\n    </table>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AA+DI,GAAG,eAAC,CAAC,AACD,QAAQ,CAAE,MAAM,CAChB,gBAAgB,CAAE,IAAI,CACtB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,AACf,CAAC,AACD,oBAAK,CAAC,AACF,eAAe,CAAE,QAAQ,AAC7B,CAAC,AACD,MAAM,eAAC,CAAC,AACJ,gBAAgB,CAAE,SAAS,AAC/B,CAAC,AACD,EAAE,eAAC,CAAC,AACA,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,KAAK,CAChB,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,CACvB,WAAW,CAAE,MAAM,AACvB,CAAC"
}